#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202108010014-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : LICENSE.md
# @ReadME        : myscreen --help
# @Copyright     : Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @Created       : Saturday, Jan 22, 2022 13:16 EST
# @File          : myscreen
# @Description   : launch screen using a custom config
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
myscreen_main() {
  PROG="$(basename "$0" 2>/dev/null)"
  VERSION="202108010014-git"
  RUN_USER="${SUDO_USER:-${USER}}"
  USER="${SUDO_USER:-${USER}}"
  HOME="${USER_HOME:-${HOME}}"
  SRC_DIR="${BASH_SOURCE%/*}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Set bash options
  if [[ "$1" == "--debug" ]]; then shift 1 && set -xo pipefail && export SCRIPT_OPTS="--debug" && export _DEBUG="on"; fi

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Main function file
  if [ -f "$SRC_DIR/functions.bash" ]; then
    local FUNCTIONS_DIR="$SRC_DIR"
    . "$FUNCTIONS_DIR/functions.bash"
  elif [ -f "$HOME/.local/bin/functions.bash" ]; then
    local FUNCTIONS_DIR="$HOME/.local/bin"
    . "$FUNCTIONS_DIR/functions.bash"
  else
    printf "\t\t\033[0;31m%s \033[0m\n" "Couldn't source the functions file from ${FUNCTIONS_DIR:-$SRC_DIR}"
    return 1
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # helper functions - See github.com/dfmgr/misc/bin/functions.bash
  __version() { app_version; }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __help() {
    app_help "4" "Usage: myscreen  " \
      "--options                              -  Show all options" \
      "-c, --config                           -  Create config file" \
      "-v, --version                          -  Display version" \
      "-h, --help                             -  Display help"

    exit $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __list_options() {
    printf_custom "$1" "$2: $(echo ${3:-$ARRAY} | __sed 's|:||g;s|'$4'| '$5'|g')" 2>/dev/null
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __gen_config() {
    printf_green "Generating the config file in"
    printf_green "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE"
    [ -d "$MYSCREEN_CONFIG_DIR" ] || mkdir -p "$MYSCREEN_CONFIG_DIR"
    [ -d "$MYSCREEN_CONFIG_BACKUP_DIR" ] || mkdir -p "$MYSCREEN_CONFIG_BACKUP_DIR"
    [ -f "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE" ] &&
      cp -Rf "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE" "$MYSCREEN_CONFIG_BACKUP_DIR/$MYSCREEN_CONFIG_FILE.$$"
    cat <<EOF >"$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE"
# Settings for myscreen
MYSCREEN_HOME="${MYSCREEN_HOME:-$HOME/.config/screen}"

# Notification settings
MYSCREEN_GOOD_MESSAGE="${MYSCREEN_GOOD_MESSAGE:-Everything Went OK}"
MYSCREEN_ERROR_MESSAGE="${MYSCREEN_ERROR_MESSAGE:-Well something seems to have gone wrong}"
MYSCREEN_NOTIFY_ENABLED="${MYSCREEN_NOTIFY_ENABLED:-yes}"
MYSCREEN_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$PROG}"
MYSCREEN_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$MYSCREEN_NOTIFY_CLIENT_ICON}"

# Colorization settings
MYSCREEN_OUTPUT_COLOR="${MYSCREEN_OUTPUT_COLOR:-5}"
MYSCREEN_OUTPUT_COLOR_GOOD="${MYSCREEN_OUTPUT_COLOR_GOOD:-2}"
MYSCREEN_OUTPUT_COLOR_ERROR="${MYSCREEN_OUTPUT_COLOR_ERROR:-1}"

EOF
    if [ -f "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE" ]; then
      [[ "$INIT_CONFIG" = "TRUE" ]] || printf_green "Your config file for $APPNAME has been created"
      true
    else
      printf_red "Failed to create the config file"
      false
    fi
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Additional functions
  __find_config() {
    find -L "$MYSCREEN_HOME" -type f -iname '*rc' -printf '%P\n' 2>/dev/null
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __launch_screen() {
    local screen_input screen_config screen_name
    screen_input="${1//$MYSCREEN_HOME/}"
    shift 1
    screen_config="$MYSCREEN_HOME/$screen_input"
    screen_name="$(basename "${screen_config}" 2>/dev/null | sed 's|rc$||g')"
    ARGS="$*"
    if [ "$screen_input" = "/dev/null" ] || [ "$1" = "null" ]; then screen_config="/dev/null" && screen_name="testing-$$"; fi
    export SCREEN_NAME="$screen_name"
    screen -c "$screen_config" -R -S $screen_name $ARGS
    exitCode=$?
    unset SCREEN_NAME SCREENEXCHANGE SCREEN_MSGMINWAIT
    return ${exitCode:-0}
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Defaults
  local exitCode=
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Application Folders
  local MYSCREEN_LOG_DIR="${MYSCREEN_LOG_DIR:-$HOME/.local/log/myscreen}"
  local MYSCREEN_CACHE_DIR="${MYSCREEN_CACHE_DIR:-$HOME/.cache/myscreen}"
  local MYSCREEN_CONFIG_DIR="${MYSCREEN_CONFIG_DIR:-$HOME/.config/misc/settings/myscreen}"
  local MYSCREEN_OPTIONS_DIR="${MYSCREEN_OPTIONS_DIR:-$HOME/.local/share/misc/myscreen/options}"
  local MYSCREEN_CONFIG_BACKUP_DIR="${MYSCREEN_CONFIG_BACKUP_DIR:-$HOME/.local/share/misc/myscreen/backups}"
  local MYSCREEN_TEMP_DIR="${MYSCREEN_TEMP_DIR:-$HOME/.local/tmp/system_scripts/myscreen}"
  local MYSCREEN_CONFIG_FILE="${MYSCREEN_CONFIG_FILE:-settings.conf}"
  local MYSCREEN_GOOD_MESSAGE="${MYSCREEN_GOOD_MESSAGE:-Everything Went OK}"
  local MYSCREEN_ERROR_MESSAGE="${MYSCREEN_ERROR_MESSAGE:-Well something seems to have gone wrong}"
  local MYSCREEN_NOTIFY_ENABLED="${MYSCREEN_NOTIFY_ENABLED:-yes}"
  local MYSCREEN_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
  local MYSCREEN_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$MYSCREEN_NOTIFY_CLIENT_ICON}"
  local MYSCREEN_OUTPUT_COLOR="${MYSCREEN_OUTPUT_COLOR:-5}"
  local MYSCREEN_OUTPUT_COLOR_GOOD="${MYSCREEN_OUTPUT_COLOR_GOOD:-2}"
  local MYSCREEN_OUTPUT_COLOR_ERROR="${MYSCREEN_OUTPUT_COLOR_ERROR:-1}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Enviroment overrides
  local MYSCREEN_HOME="${MYSCREEN_HOME:-$HOME/.config/screen}"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Generate config files
  [ -f "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE" ] || [[ "$*" = *config ]] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Import config
  [ -f "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE" ] && . "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Ensure Directories exist
  [ -d "$MYSCREEN_LOG_DIR" ] || mkdir -p "$MYSCREEN_LOG_DIR" &>/dev/null
  [ -d "$MYSCREEN_TEMP_DIR" ] || mkdir -p "$MYSCREEN_TEMP_DIR" &>/dev/null
  [ -d "$MYSCREEN_CACHE_DIR" ] || mkdir -p "$MYSCREEN_CACHE_DIR" &>/dev/null
  local MYSCREEN_TEMP_FILE="${MYSCREEN_TEMP_FILE:-$(mktemp $MYSCREEN_TEMP_DIR/XXXXXX 2>/dev/null)}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Setup trap to remove temp file
  trap 'exitCode=${exitCode:-$?};[ -n "$MYSCREEN_TEMP_FILE" ] && [ -f "$MYSCREEN_TEMP_FILE" ] && rm -Rf "$MYSCREEN_TEMP_FILE" &>/dev/null' EXIT
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Setup notification function
  if [ "$MYSCREEN_NOTIFY_ENABLED" = "yes" ]; then
    __notifications() {
      export NOTIFY_GOOD_MESSAGE="${MYSCREEN_GOOD_MESSAGE}"
      export NOTIFY_ERROR_MESSAGE="${MYSCREEN_ERROR_MESSAGE}"
      export NOTIFY_CLIENT_NAME="${MYSCREEN_NOTIFY_CLIENT_NAME}"
      export NOTIFY_CLIENT_ICON="${MYSCREEN_NOTIFY_CLIENT_ICON}"
      notifications "$@" && exitCode=0 || exitCode=1
      unset NOTIFY_CLIENT_NAME NOTIFY_CLIENT_ICON NOTIFY_GOOD_MESSAGE NOTIFY_ERROR_MESSAGE
      return ${exitCode:-$?}
    }
  else
    __notifications() { false; }
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Show warn message if variables are missing

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Argument/Option settings
  local SETARGS="$*"
  local SHORTOPTS=""
  local LONGOPTS="options,config,version,help,dir:"
  local ARRAY=""
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Setup application options
  local setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$(basename "$0" 2>/dev/null)" -- "$@" 2>/dev/null)
  eval set -- "${setopts[@]}" 2>/dev/null
  while :; do
    case "$1" in
    --options)
      shift 1
      [ -n "$1" ] || printf_blue "Current options for ${PROG:-$APPNAME}"
      [ -z "$SHORTOPTS" ] || __list_options "5" "Short Options" "-$SHORTOPTS" ',' '-'
      [ -z "$LONGOPTS" ] || __list_options "5" "Long Options" "--$LONGOPTS" ',' '--'
      [ -z "$ARRAY" ] || __list_options "5" "Base Options" "$ARRAY" ',' ''
      exit $?
      ;;
    --version)
      shift 1
      __version
      exit $?
      ;;
    --help)
      shift 1
      __help
      exit $?
      ;;
    --config)
      shift 1
      __gen_config
      exit $?
      ;;
    --dir)
      MYSCREEN_CWD="$2"
      shift 2
      ;;
    --)
      shift 1
      break
      ;;
    esac
  done
  #set -- "$SETARGS"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Actions based on env
  [ $# -eq 0 ] && printf_blue "Usage: $PROG [configFile] [name]" && __find_config | printf_column && return 1

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Check for required applications/Network check
  cmd_exists --error bash screen || exit 1 # exit 1 if not found
  #am_i_online --error || exit 1     # exit 1 if no internet
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # APP Variables overrides

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # begin main app
  __launch_screen "$@"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # lets exit with code
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute function
myscreen_main "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
