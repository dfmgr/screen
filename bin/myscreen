#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202108010014-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : LICENSE.md
# @ReadME        : myscreen --help
# @Copyright     : Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @Created       : Saturday, Jan 22, 2022 13:16 EST
# @File          : myscreen
# @Description   : launch screen using a custom config
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
myscreen_main() {
  PROG="$(basename "$0" 2>/dev/null)"
  VERSION="202108010014-git"
  RUN_USER="${SUDO_USER:-${USER}}"
  USER="${SUDO_USER:-${USER}}"
  HOME="${USER_HOME:-${HOME}}"
  SRC_DIR="${BASH_SOURCE%/*}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Set bash options
  if [[ "$1" == "--debug" ]]; then shift 1 && set -xo pipefail && export SCRIPT_OPTS="--debug" && export _DEBUG="on"; fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Main function file
  if [ -f "$SRC_DIR/functions.bash" ]; then
    local FUNCTIONS_DIR="$SRC_DIR"
    . "$FUNCTIONS_DIR/functions.bash"
  elif [ -f "$HOME/.local/bin/functions.bash" ]; then
    local FUNCTIONS_DIR="$HOME/.local/bin"
    . "$FUNCTIONS_DIR/functions.bash"
  else
    printf "\t\t\033[0;31m%s \033[0m\n" "Couldn't source the functions file from ${FUNCTIONS_DIR:-$SRC_DIR}"
    return 1
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # helper functions - See github.com/dfmgr/misc/bin/functions.bash
  __version() { app_version; }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __help() { #
    app_help "4" "Usage: myscreen [conf] [name] cmd " \
      "default                                -  default config" \
      "single                                 -  single config" \
      "productivity                           -  productivity config" \
      "dev/development                        -  dev/development config" \
      "dev/docker                             -  dev/docker config" \
      "dev/node                               -  dev/node config" \
      "dev/single                             -  dev/single config" \
      "dev/ssh                                -  dev/ssh config" \
      "other/cdd                              -  other/cdd config" \
      "other/social                           -  other/social config" \
      "-c                                     -  default config" \
      "--replace                              -  Replace an existing config " \
      "--template                             -  Create a new config file [name] [name:cmd,dev:zsh]" \
      "--options                              -  Show all options" \
      "--config                               -  Create config file" \
      "--version                              -  Display version" \
      "--help                                 -  Display help"

    exit $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __list_options() {
    printf_custom "$1" "$2: $(echo ${3:-$ARRAY} | __sed 's|:||g;s|'$4'| '$5'|g')" 2>/dev/null
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __gen_config() {
    printf_green "Generating the config file in"
    printf_green "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE"
    [ -d "$MYSCREEN_CONFIG_DIR" ] || mkdir -p "$MYSCREEN_CONFIG_DIR"
    [ -d "$MYSCREEN_CONFIG_BACKUP_DIR" ] || mkdir -p "$MYSCREEN_CONFIG_BACKUP_DIR"
    [ -f "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE" ] &&
      cp -Rf "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE" "$MYSCREEN_CONFIG_BACKUP_DIR/$MYSCREEN_CONFIG_FILE.$$"
    cat <<EOF >"$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE"
# Settings for myscreen
MYSCREEN_DEFAULT="${MYSCREEN_DEFAULT:-}"
MYSCREEN_HOME="${MYSCREEN_HOME:-$HOME/.config/screen}"

# Notification settings
MYSCREEN_GOOD_MESSAGE="${MYSCREEN_GOOD_MESSAGE:-Everything Went OK}"
MYSCREEN_ERROR_MESSAGE="${MYSCREEN_ERROR_MESSAGE:-Well something seems to have gone wrong}"
MYSCREEN_NOTIFY_ENABLED="${MYSCREEN_NOTIFY_ENABLED:-yes}"
MYSCREEN_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$PROG}"
MYSCREEN_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$MYSCREEN_NOTIFY_CLIENT_ICON}"

# Colorization settings
MYSCREEN_OUTPUT_COLOR="${MYSCREEN_OUTPUT_COLOR:-5}"
MYSCREEN_OUTPUT_COLOR_GOOD="${MYSCREEN_OUTPUT_COLOR_GOOD:-2}"
MYSCREEN_OUTPUT_COLOR_ERROR="${MYSCREEN_OUTPUT_COLOR_ERROR:-1}"

EOF
    if [ -f "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE" ]; then
      [[ "$INIT_CONFIG" = "TRUE" ]] || printf_green "Your config file for $APPNAME has been created"
      true
    else
      printf_red "Failed to create the config file"
      false
    fi
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __create_windows() {
    local count=0
    local windows="${*//,/ }"
    [ "$windows" = "" ] && printf 'screen -t main       1 bash' && return
    for window in $windows; do
      count=$((count + 1))
      win="$(echo "$window" | awk -F ':' '{print $1}' || echo '')"
      cmd="$(echo "$window" | awk -F ':' '{print $2}' || echo '')"
      printf 'screen -t %s       %s %s\n' "${win:-$window}" "$count" "${cmd:-bash}"
    done
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Additional functions
  __cd() { builtin cd "$1" || return 1; }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __find_config() {
    find -L "$MYSCREEN_HOME" -type f -iname '*rc' -printf '%P\n' | sed 's|rc$||g' 2>/dev/null
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __create_template() {
    name="$(basename "$MYSCREEN_CREATE_TEMPLATE" 2>/dev/null)"
    dir="$(dirname "$(realpath "$MYSCREEN_CREATE_TEMPLATE")" 2>/dev/null)"
    [ "$MYSCREE_UPDATE_CONF" = "true" ] && [ -f "$dir/${name}" ] && rm -f "$dir/${name}"
    [ -f "$dir/${name}" ] && printf_exit "File $dir/${name} exists"
    printf_cyan "Creating $dir/${name}"
    [ -d "$dir" ] || mkdir -p "$dir"
    __template "$@" | tee "$dir/${name}" &>/dev/null
    if [ -f "$dir/${name}" ]; then
      printf_green "Created $dir/${name}"
      exit 0
    else
      printf_yellow "Failed to create $dir/${name}"
      exit 1
    fi
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __launch_screen() {
    local screen_input screen_config custom_screen_name="$MYSCREEN_NAME" customConf="${1:-$MYSCREEN_CUSTOM_CONFIG}"
    customConf="${customConf//$MYSCREEN_HOME/}"
    if [ -f "${customConf}" ]; then
      shift 1
      screen_config="$customConf"
    elif [ -f "${customConf}rc" ]; then
      shift 1
      screen_config="${customConf}rc"
    elif [ -f "$MYSCREEN_HOME/${customConf}" ]; then
      shift 1
      screen_config="$MYSCREEN_HOME/${customConf}"
    elif [ -f "$MYSCREEN_HOME/${customConf}rc" ]; then
      shift 1
      screen_config="$MYSCREEN_HOME/${customConf}rc"
    elif [ "$screen_input" = "/dev/null" ] || [ "$customConf" = "null" ]; then
      screen_name="testing-$$"
      screen_config="/dev/null"
    elif [ -f "${MYSCREEN_DEFAULT}" ]; then
      screen_input="${MYSCREEN_DEFAULT}"
      screen_config="${MYSCREEN_DEFAULT}"
    elif [ -f "${MYSCREEN_DEFAULT}rc" ]; then
      screen_input="${MYSCREEN_DEFAULT}rc"
      screen_config="${MYSCREEN_DEFAULT}rc"
    elif [ -f "$MYSCREEN_HOME/${MYSCREEN_DEFAULT}" ]; then
      screen_input="$MYSCREEN_HOME/${MYSCREEN_DEFAULT}"
      screen_config="$MYSCREEN_HOME/${MYSCREEN_DEFAULT}"
    elif [ -f "$MYSCREEN_HOME/${MYSCREEN_DEFAULT}rc" ]; then
      screen_input="$MYSCREEN_HOME/${MYSCREEN_DEFAULT}rc"
      screen_config="$MYSCREEN_HOME/${MYSCREEN_DEFAULT}rc"
    else
      screen_name="set_default_rc"
      screen_config="${MYSCREEN_DEFAULT:-defaultrc}"
    fi
    [ -d "$1" ] && __cd "$1" && shift 1 || __cd "${MYSCREEN_CWD:-$PWD}"
    if [ "$screen_name" = "set_default_rc" ]; then
      if [ -f "$MYSCREEN_HOME/${screen_config}" ]; then
        screen_name="default"
        screen_config="$MYSCREEN_HOME/${screen_config}"
      elif [ -f "$MYSCREEN_HOME/${screen_config}rc" ]; then
        screen_name="default"
        screen_config="$MYSCREEN_HOME/${screen_config}rc"
      else
        printf_yellow "$MYSCREEN_HOME/${screen_config} does not exist"
        printf_blue "Usage: $PROG [configFile] [name]" && __find_config | printf_column && return 1
      fi
    fi
    ARGS="$*"
    screen_name="${custom_screen_name:-$screen_name}"
    screen_name="$(basename "${screen_name:-$screen_config}" 2>/dev/null | sed 's|rc$||g')"
    export SCREEN_NAME="$screen_name"
    screen -R -S $SCREEN_NAME -c "$screen_config" ${ARGS}
    exitCode=$?
    unset SCREEN_NAME SCREENEXCHANGE SCREEN_MSGMINWAIT
    return ${exitCode:-0}
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __template() {
    local win_names="$*"
    cat <<EOF | tee
# default windows
$(__create_windows "$win_names")
# Remap control+a to control+x
escape ^Xx
# set session name
#sessionname ${name:-template}
# search | name for dynamic window titles
shelltitle '\$|bash'
# Detect activity in new windows
defmonitor on
# Turn your hardstatus line into a dynamic urxvt|xterm|aterm window title
backtick 1 5 5 true
attrcolor b ".I"
term "xterm-256color"
defbce on
# Always start \`screen\` with UTF-8 enabled (\`screen -U\`)
defutf8 on
# Set the window titles
caption never
caption string "%n %t"
# Set the status bar
hardstatus alwayslastline
hardstatus string '%{= Kd} %{= Kd}%-w%{= Kr}[%{= KW}%n %t%{= Kr}]%{= Kd}%+w %-= %{KG} %H%{KW} | %?%{KY}LSF: %101\`%{KW} | %?%D %M %d %Y%{= Kc} %C%A%{-}'
# huge scrollback buffer
defscrollback 5000
# welcome message
startup_message off
# Display notification when bell is detected for a window
bell_msg "Bell detected in %t (%n)!"
activity "Activity detected in %t (%n)!"
# Fix for residual editor text
altscreen on
# print wackier status messages
nethack on
# mouse tracking allows to switch region focus by clicking
mousetrack off
# window numbering starts at 1 not 0
select 1
bind c screen 1
# get rid of silly xoff stuff
bind s split
# layouts
layout autosave on
layout new one
layout attach one
layout select one
# use hjkl keys to resize regions
bind -c rsz h eval "resize -h -5" "command -c rsz"
bind -c rsz j eval "resize -v -5" "command -c rsz"
bind -c rsz k eval "resize -v +5" "command -c rsz"
bind -c rsz l eval "resize -h +5" "command -c rsz"
# quickly switch between regions using tab and arrows
bind -c rsz \t    eval "focus"       "command -c rsz" # Tab
bind -c rsz -k kl eval "focus left"  "command -c rsz" # Left
bind -c rsz -k kr eval "focus right" "command -c rsz" # Right
bind -c rsz -k ku eval "focus up"    "command -c rsz" # Up
bind -c rsz -k kd eval "focus down"  "command -c rsz" # Down
# You can use "showkey -a" to capture the key definitions for your terminal.
bindkey "^[OR" prev         # F3 = previous window
bindkey "^[OS" next         # F4 = next window
bindkey "^[[1;2C" next      # shift+right_arrow
bindkey "^[[1;2D" prev      # shift+left_arrow
bindkey "^[[A" focus top    # ctrl+up_arrow = large top area
bindkey "^[[B" focus down   # ctrl+down_arrow = bottom-left area
bindkey "^[[C" focus bottom # ctrl+right_arrow = bottom-right area
bindkey "^[[D" focus left   # ctrl+left_arrow = back to bottom-left area from bottom-right area
# Finally! Shift-pg up or down to view scrollback buffer
bindkey "^[[5;2~" eval "copy" "stuff ^u"
bindkey -m "^[[5;2~" stuff ^u
bindkey -m "^[[6;2~" stuff ^d
# Mouse scrolling
# Scroll up
bindkey -d "^[[5S" eval copy "stuff 5\025"
bindkey -m "^[[5S" stuff 5\025
# Scroll down
bindkey -d "^[[5T" eval copy "stuff 5\004"
bindkey -m "^[[5T" stuff 5\004
# Scroll up more
bindkey -d "^[[25S" eval copy "stuff \025"
bindkey -m "^[[25S" stuff \025
# Scroll down more
bindkey -d "^[[25T" eval copy "stuff \004"
bindkey -m "^[[25T" stuff \004

EOF
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Defaults
  local exitCode=
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Application Folders
  local MYSCREEN_LOG_DIR="${MYSCREEN_LOG_DIR:-$HOME/.local/log/myscreen}"
  local MYSCREEN_CACHE_DIR="${MYSCREEN_CACHE_DIR:-$HOME/.cache/myscreen}"
  local MYSCREEN_CONFIG_DIR="${MYSCREEN_CONFIG_DIR:-$HOME/.config/misc/settings/myscreen}"
  local MYSCREEN_OPTIONS_DIR="${MYSCREEN_OPTIONS_DIR:-$HOME/.local/share/misc/myscreen/options}"
  local MYSCREEN_CONFIG_BACKUP_DIR="${MYSCREEN_CONFIG_BACKUP_DIR:-$HOME/.local/share/misc/myscreen/backups}"
  local MYSCREEN_TEMP_DIR="${MYSCREEN_TEMP_DIR:-$HOME/.local/tmp/system_scripts/myscreen}"
  local MYSCREEN_CONFIG_FILE="${MYSCREEN_CONFIG_FILE:-settings.conf}"
  local MYSCREEN_GOOD_MESSAGE="${MYSCREEN_GOOD_MESSAGE:-Everything Went OK}"
  local MYSCREEN_ERROR_MESSAGE="${MYSCREEN_ERROR_MESSAGE:-Well something seems to have gone wrong}"
  local MYSCREEN_NOTIFY_ENABLED="${MYSCREEN_NOTIFY_ENABLED:-yes}"
  local MYSCREEN_NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$APPNAME}"
  local MYSCREEN_NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$MYSCREEN_NOTIFY_CLIENT_ICON}"
  local MYSCREEN_OUTPUT_COLOR="${MYSCREEN_OUTPUT_COLOR:-5}"
  local MYSCREEN_OUTPUT_COLOR_GOOD="${MYSCREEN_OUTPUT_COLOR_GOOD:-2}"
  local MYSCREEN_OUTPUT_COLOR_ERROR="${MYSCREEN_OUTPUT_COLOR_ERROR:-1}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Enviroment overrides
  local MYSCREEN_CREATE_ENABLED="false"
  local MYSCREEN_DEFAULT="${MYSCREEN_DEFAULT:-default}"
  local MYSCREEN_HOME="${MYSCREEN_HOME:-$HOME/.config/screen}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Generate config files
  [ -f "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE" ] || [[ "$*" = *config ]] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Import config
  [ -f "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE" ] && . "$MYSCREEN_CONFIG_DIR/$MYSCREEN_CONFIG_FILE"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Ensure Directories exist
  [ -d "$MYSCREEN_LOG_DIR" ] || mkdir -p "$MYSCREEN_LOG_DIR" &>/dev/null
  [ -d "$MYSCREEN_TEMP_DIR" ] || mkdir -p "$MYSCREEN_TEMP_DIR" &>/dev/null
  [ -d "$MYSCREEN_CACHE_DIR" ] || mkdir -p "$MYSCREEN_CACHE_DIR" &>/dev/null
  local MYSCREEN_TEMP_FILE="${MYSCREEN_TEMP_FILE:-$(mktemp $MYSCREEN_TEMP_DIR/XXXXXX 2>/dev/null)}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Setup trap to remove temp file
  trap 'exitCode=${exitCode:-$?};[ -n "$MYSCREEN_TEMP_FILE" ] && [ -f "$MYSCREEN_TEMP_FILE" ] && rm -Rf "$MYSCREEN_TEMP_FILE" &>/dev/null' EXIT
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Setup notification function
  if [ "$MYSCREEN_NOTIFY_ENABLED" = "yes" ]; then
    __notifications() {
      export NOTIFY_GOOD_MESSAGE="${MYSCREEN_GOOD_MESSAGE}"
      export NOTIFY_ERROR_MESSAGE="${MYSCREEN_ERROR_MESSAGE}"
      export NOTIFY_CLIENT_NAME="${MYSCREEN_NOTIFY_CLIENT_NAME}"
      export NOTIFY_CLIENT_ICON="${MYSCREEN_NOTIFY_CLIENT_ICON}"
      notifications "$@" && exitCode=0 || exitCode=1
      unset NOTIFY_CLIENT_NAME NOTIFY_CLIENT_ICON NOTIFY_GOOD_MESSAGE NOTIFY_ERROR_MESSAGE
      return ${exitCode:-$?}
    }
  else
    __notifications() { false; }
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Show warn message if variables are missing

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Argument/Option settings
  local SETARGS="$*"
  local SHORTOPTS="c:"
  local LONGOPTS="options,config,version,help,dir:,template:,replace,name:"
  local ARRAY="default dev/development dev/node dev/single dev/ssh other/cdd other/social productivity single"
  local setopts=""
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Setup application options
  setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$(basename "$0" 2>/dev/null)" -- "$@" 2>/dev/null)
  eval set -- "${setopts[@]}" 2>/dev/null
  while :; do
    case "$1" in
    --options)
      shift 1
      [ -n "$1" ] || printf_blue "Current options for ${PROG:-$APPNAME}"
      [ -z "$SHORTOPTS" ] || __list_options "5" "Short Options" "-$SHORTOPTS" ',' '-'
      [ -z "$LONGOPTS" ] || __list_options "5" "Long Options" "--$LONGOPTS" ',' '--'
      [ -z "$ARRAY" ] || __list_options "5" "Base Options" "$ARRAY" ',' ''
      exit $?
      ;;
    --version)
      shift 1
      __version
      exit $?
      ;;
    --help)
      shift 1
      __help
      exit $?
      ;;
    --config)
      shift 1
      __gen_config
      exit $?
      ;;
    --dir)
      MYSCREEN_CWD="$2"
      shift 2
      ;;
    -c)
      MYSCREEN_CUSTOM_CONFIG="$2"
      shift 2
      ;;
    --replace)
      shift 1
      MYSCREE_UPDATE_CONF="true"
      ;;
    --template)
      MYSCREEN_CREATE_ENABLED="true"
      MYSCREEN_CREATE_TEMPLATE="$2"
      shift 2
      ;;
    --name)
      MYSCREEN_NAME="$2"
      shift 2
      ;;
    --)
      shift 1
      break
      ;;
    esac
  done
  #set -- "$SETARGS"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Actions based on env
  [ "$MYSCREEN_CREATE_ENABLED" = "true" ] && [ -z "$MYSCREEN_CREATE_TEMPLATE" ] && __help
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Check for required applications/Network check
  cmd_exists --error bash screen || exit 1 # exit 1 if not found
  #am_i_online --error || exit 1     # exit 1 if no internet
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # APP Variables overrides
  [ "$MYSCREEN_CREATE_ENABLED" = "true" ] && __create_template "$@"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # begin main app
  case $1 in
  create)
    shift 1
    __create_windows "$@"
    exit $?
    ;;
  single)
    shift 1
    __launch_screen singlerc "$@"
    exit $?
    ;;
  *)
    __launch_screen "$@"
    ;;
  esac

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # lets exit with code
  return ${exitCode:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute function
myscreen_main "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-$?}
